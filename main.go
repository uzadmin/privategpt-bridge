package main

import (
	"encoding/json"
	"log"
	"net/http"
	"net/http/httputil"
	"net/url"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// PrivateGPT API Configuration
const (
	PRIVATEGPT_HOST = "http://localhost:8001"
	SERVER_PORT     = ":8080"
	STATIC_DIR      = "./static" // HTML —Ñ–∞–π–ª—ã
)

// CORS middleware –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
func corsMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ origins –¥–ª—è development (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–º–µ–Ω)
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Requested-With")
		w.Header().Set("Access-Control-Expose-Headers", "Content-Length, Content-Type")
		w.Header().Set("Access-Control-Max-Age", "86400") // 24 hours

		// Handle preflight requests
		if r.Method == "OPTIONS" {
			w.WriteHeader(http.StatusOK)
			return
		}

		next.ServeHTTP(w, r)
	})
}

// Logging middleware
func loggingMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()
		next.ServeHTTP(w, r)
		log.Printf("%s %s %v", r.Method, r.URL.Path, time.Since(start))
	})
}

// PrivateGPT API Proxy Handler
func createAPIProxy() http.Handler {
	target, err := url.Parse(PRIVATEGPT_HOST)
	if err != nil {
		log.Fatal("Invalid PrivateGPT URL:", err)
	}

	proxy := httputil.NewSingleHostReverseProxy(target)
	
	// –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã
	proxy.ModifyResponse = func(resp *http.Response) error {
		// –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ –æ—Ç–≤–µ—Ç–∞–º PrivateGPT
		resp.Header.Set("Access-Control-Allow-Origin", "*")
		resp.Header.Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
		resp.Header.Set("Access-Control-Expose-Headers", "Content-Length, Content-Type")
		return nil
	}

	proxy.ErrorHandler = func(w http.ResponseWriter, r *http.Request, err error) {
		log.Printf("Proxy error: %v", err)
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadGateway)
		json.NewEncoder(w).Encode(map[string]string{
			"error": "PrivateGPT service unavailable",
			"details": err.Error(),
		})
	}

	return proxy
}

// Static files handler –¥–ª—è HTML —Ñ–∞–π–ª–∞
func staticFilesHandler(w http.ResponseWriter, r *http.Request) {
	path := r.URL.Path
	
	// –ï—Å–ª–∏ –ø—É—Ç—å "/" –∏–ª–∏ –ø—É—Å—Ç–æ–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º index.html
	if path == "/" || path == "" {
		path = "/index.html"
	}
	
	// –£–¥–∞–ª—è–µ–º –≤–µ–¥—É—â–∏–π —Å–ª—ç—à –¥–ª—è filepath.Join
	if strings.HasPrefix(path, "/") {
		path = path[1:]
	}
	
	fullPath := filepath.Join(STATIC_DIR, path)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	if _, err := os.Stat(fullPath); os.IsNotExist(err) {
		// –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º index.html
		fullPath = filepath.Join(STATIC_DIR, "index.html")
	}
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type
	ext := filepath.Ext(fullPath)
	switch ext {
	case ".html":
		w.Header().Set("Content-Type", "text/html; charset=utf-8")
	case ".css":
		w.Header().Set("Content-Type", "text/css")
	case ".js":
		w.Header().Set("Content-Type", "application/javascript")
	case ".png":
		w.Header().Set("Content-Type", "image/png")
	case ".jpg", ".jpeg":
		w.Header().Set("Content-Type", "image/jpeg")
	}
	
	http.ServeFile(w, r, fullPath)
}

// File upload handler - —É–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ HTML –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º–æ–π API
// –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã /v1/ingest/file –ø—Ä–æ–∫—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
func healthHandler(w http.ResponseWriter, r *http.Request) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PrivateGPT
	resp, err := http.Get(PRIVATEGPT_HOST + "/health")
	
	health := map[string]interface{}{
		"bridge": "ok",
		"timestamp": time.Now().Unix(),
	}
	
	if err != nil {
		health["privategpt"] = "unavailable"
		health["error"] = err.Error()
		w.WriteHeader(http.StatusServiceUnavailable)
	} else {
		defer resp.Body.Close()
		if resp.StatusCode == 200 {
			health["privategpt"] = "ok"
		} else {
			health["privategpt"] = "error"
			health["status_code"] = resp.StatusCode
		}
	}
	
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(health)
}

// WebSocket proxy –¥–ª—è streaming (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
func websocketProxy(w http.ResponseWriter, r *http.Request) {
	// TODO: –î–æ–±–∞–≤–∏—Ç—å WebSocket –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ PrivateGPT –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç streaming
	w.WriteHeader(http.StatusNotImplemented)
	w.Write([]byte("WebSocket streaming not implemented yet"))
}

func main() {
	log.Printf("Starting PrivateGPT Bridge Server...")
	log.Printf("PrivateGPT API: %s", PRIVATEGPT_HOST)
	log.Printf("Static files: %s", STATIC_DIR)
	log.Printf("Server port: %s", SERVER_PORT)

	// –°–æ–∑–¥–∞–µ–º API –ø—Ä–æ–∫—Å–∏
	apiProxy := createAPIProxy()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
	mux := http.NewServeMux()

	// API –º–∞—Ä—à—Ä—É—Ç—ã - –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º –∫ PrivateGPT
	mux.Handle("/v1/", apiProxy)
	mux.Handle("/api/", apiProxy)
	
	// Health check - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à –ø—Ä–æ–∫—Å–∏, –ø–æ—Ç–æ–º PrivateGPT
	mux.Handle("/health", http.HandlerFunc(healthHandler))
	
	// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
	mux.Handle("/ws", http.HandlerFunc(websocketProxy))
	
	// –°—Ç–∞—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã Next.js –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
	mux.HandleFunc("/", staticFilesHandler)

	// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware
	handler := corsMiddleware(loggingMiddleware(mux))

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	log.Printf("üöÄ Server running on http://localhost%s", SERVER_PORT)
	log.Printf("üìÅ Serving HTML files from: %s", STATIC_DIR)
	log.Printf("üîÑ Proxying API requests to: %s", PRIVATEGPT_HOST)
	
	if err := http.ListenAndServe(SERVER_PORT, handler); err != nil {
		log.Fatal("Server failed to start:", err)
	}
}
